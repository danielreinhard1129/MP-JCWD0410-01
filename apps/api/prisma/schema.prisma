// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         Role
  profilePic   String?
  address      String?
  phoneNumber  String?
  referral     String?       @unique
  provider     Provider      @default(CREDENTIALS)
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  userPoints   UserPoint[]
  userRewards  UserReward[]
  userVouchers UserVoucher[]
  events       Event[]
  reviews      Review[]
  transactions Transaction[]

  @@map("User")
}

enum Provider {
  GOOGLE
  CREDENTIALS
}

model UserPoint {
  id        Int      @id @default(autoincrement())
  points    Int
  expDate   DateTime
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_points")
}

model UserReward {
  id       Int     @id @default(autoincrement())
  userId   Int
  rewardId Int
  isUsed   Boolean @default(false)

  reward Reward @relation(fields: [rewardId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_rewards")
}

model Reward {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  quota       Int
  nominal     Int
  claimed     Int          @default(0)
  expDate     DateTime
  createdAt   DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  userRewards UserReward[]

  @@map("rewards")
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUsed    Boolean @default(false)

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("user_vouchers")
}

model Voucher {
  id           Int           @id @default(autoincrement())
  eventId      Int
  name         String
  code         String        @unique
  quota        Int
  nominal      Int
  claimed      Int           @default(0)
  expDate      DateTime
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  userVouchers UserVoucher[]
  event        Event         @relation(fields: [eventId], references: [id])

  @@map("vouchers")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  comment   String
  rating    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

model Event {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  name        String
  thumbnail   String
  description String   @db.LongText()
  location    String
  startDate   DateTime
  endDate     DateTime
  price       Int
  discount    Int      @default(0)
  quota       Int
  booked      Int      @default(0)
  userId      Int
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  vouchers     Voucher[]
  reviews      Review[]
  transactions Transaction[]

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  events    Event[]

  @@map("categories")
}

model Transaction {
  id            Int           @id @default(autoincrement())
  userId        Int
  eventId       Int
  qty           Int
  total         Int
  status        Status
  paymentProof  String?
  paymentMethod PaymentMethod
  pointUsed     Int           @default(0)
  voucherUsed   Int           @default(0)
  rewardUsed    Int           @default(0)
  createdAt     DateTime      @default(now())
  updateAt      DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  event         Event         @relation(fields: [eventId], references: [id])

  @@map("transactions")
}

enum Status {
  WAIITNG_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum PaymentMethod {
  BCA
  BRI
  MANDIRI
}
